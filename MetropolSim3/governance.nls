
;;;;;;;;;;;;;;;;
;; governance
;;;;;;;;;;;;;;;;


;; 
;  Transportation network evolution (governance part of the model)
;
;  Contiguous actors with most wealth take decision ; or top-down regional planning.
;
;
to governance
  
  output-print "governance"
  
  ; get agents making the decision
  let decidors decision-makers
  
  ; corresponding potential place for infrastructures
  ;let infra-choices potential-infrastructures decidors
  
  let old-config save-nw-config
  ; construct the best one
  construct-infrastructure (best-infrastructure decidors old-config) old-config
  
  ; recompute patch vars here - as indicators are called after the end of this stage.
  ;  Q : to gain perf, do it only at the end ? -- OK not so much time
  compute-patches-variables
  
end


;;
; Gets mayors taking the decision at this step - can be region ?
to-report decision-makers
  
  ifelse random-float 1 < regional-decision-proba [
     ; regional decision
     report regional-authority
  ][
     ; local decision : choose according to wealth
     ; choose neighbor pairs with maximal weight
     ; dirty way ok as very few mayors
     ;
     ;  -- TODO -- for now not random
     ;
     ;  @TODO implement various ways to choose constructors ?
     ;
     let ma 0 let maxpair []
     ask mayors[ask other mayors [let etot [employments] of self + [employments] of myself if etot > ma [set ma etot set maxpair (list self myself)]]]
     report maxpair
  ]
  
end


;;
; Reports a list of potential infras (which format ?)
;
;  FIND Heuristic in order to exploit reduced part of the space (already too long with very few patches if in O(n^2)
;  here no game, report indifferently common and alone infras ? or report with distinct feature ?
to-report potential-infrastructures [decidors rlength]
  let res []
  ifelse decidors = regional-authority [
    repeat #-explorations [
      set res lput (random-infra patches rlength) res
    ]
  ][
    ; number of infra to be explored scales as |decidors|^2, if number of patches is constant among decidors. (to fill 'same proportion' of territory)
    repeat (#-explorations) * ((length decidors) ^ 2) [
      set res lput (random-infra (patches with [member? governing-mayor decidors]) rlength) res
    ]
  ]
  report res
end


;;
; Given a set of choices and decidors, find the best infrastructure
;
;  Implement the game between the two players here -> evaluate all costs (have to be done anyway), then draw randomly issue of the game according to individual utilities 
;
;  @returns list of coordinates of extremities (better not to construct links here -> sure, as capacity congestion etc are not used at this step : only matrix needed.
to-report best-infrastructure [decidors old-config]
  
  ifelse decidors = regional-authority [
    ; no game, find the best among the choices
    report (list first compare-infrastructures old-config (potential-infrastructures regional-authority (2 * road-length)) regional-authority patches)
  ][  
    ; generate potential infras here ?
    ; no, in the game, as different if random or nash game
    report game-result decidors old-config
  ]
  
end



;;
; raw comparison of infras : needs old configuration of a-e ? yes nw config for shortest paths
;  -- NOTE -- for mean-acc ; shouldn't it be only on patches concerned by the decidor ?
;    --> OK
;
to-report compare-infrastructures [old-nw-config choices decidor patchset]
  verbose (word "comparing " length choices " infras")
  
  recall-nw-config old-nw-config
  
  ; old mean accessibility
  compute-patches-accessibilities
  let old-acc mean-accessibility patchset
  let olds (list mean-accessibility patches)
  foreach sort-on [who] (mayors with [self != regional-authority]) [set olds lput (mean-accessibility patches with [governing-mayor = ?]) olds] 
  
  verbose (word "Mean-travel-distance : " mean-travel-distance)
  
  let best-choice [] let delta-acc 0 let deltas []
  foreach choices [
    recall-nw-config old-nw-config
    let potential-infra new-infra ?
    update-network potential-infra
    update-effective-matrices
    ; recompute new accessibilities
    compute-patches-accessibilities
    let new-acc mean-accessibility patchset
    let news (list mean-accessibility patches)
    foreach sort-on [who] (mayors with [self != regional-authority]) [set news lput (mean-accessibility patches with [governing-mayor = ?]) news]
    
    
    ; check if better delta-acc
    verbose (word "∆Z=" (new-acc - old-acc))
    verbose (word "mean-travel-distance = " mean-travel-distance)
    
    if (new-acc - old-acc) < 0 [user-message ""]
    
    if (new-acc - old-acc) > delta-acc [
      set best-choice ?
      set delta-acc (new-acc - old-acc)
      set deltas [] let i 0 foreach news [set deltas lput (? - item i olds) deltas set i i + 1]
    ]
    
    ; kill the potential infra, will be reconstructed if indeed the best
    ask potential-infra [ask both-ends [die] die]
    
    ; color patch here
    color-patches
  ]
  
  verbose (word "best infra is " best-choice " with ∆Z=" delta-acc)
  
  report (list best-choice deltas decidor)
end



;;
; Implement the game between the two actors
to-report game-result [decidors old-config]
  
    if game-type = "random" [
      verbose "Random decidor choice..."
      
      ; Random = no game, choose one decidor proportionally to wealth
      ; any number of decidors
      let r random-float 1
      let dec nobody
      let wtot sum [wealth] of decidors let s 0
      foreach decidors [set s s + ([wealth] of ?) / wtot if r < s and dec = nobody [set dec ?]]
      let best compare-infrastructures old-config (potential-infrastructures (list dec) road-length) (list dec) (patches with [governing-mayor = dec])
      report (list first best)
    ]
   
   
   ;; Mixed strategy nash eq (2 players)
   if game-type = "simple-nash" and length decidors = 2 [
     
      verbose "Nash game..."
     
      let dec1 first decidors let dec2 last decidors
     
      let best1 compare-infrastructures old-config (potential-infrastructures (list dec1) road-length) (list dec1) (patches with [governing-mayor = dec1])
      let best2 compare-infrastructures old-config (potential-infrastructures (list dec2) road-length) (list dec2) (patches with [governing-mayor = dec2])
      let best12 compare-infrastructures old-config (potential-infrastructures regional-authority (2 * road-length)) regional-authority patches
      let sortdec sort-by [[who] of ?1 < [who] of ?2] (list dec1 dec2)
      let D11 item ((position dec1 sortdec) + 1) (item 1 best1) let D22 item ((position dec2 sortdec) + 1) (item 1 best2)
      let Dc1 item ((position dec1 sortdec) + 1) (item 1 best12) let Dc2 item ((position dec2 sortdec) + 1) (item 1 best12)
      
      verbose (word "D11 = " D11 " ; D22 = " D22 " ; Dc1 = " Dc1 " ; Dc2 = " Dc2)
      
      let construction-cost 1
      
      let m1 (list (list (Dc1 - construction-cost - collaboration-cost) (D11 - construction-cost - collaboration-cost)) (list (D11 - construction-cost) (D11 - construction-cost)))
      let m2 (list (list (Dc2 - construction-cost - collaboration-cost) (D22 - construction-cost - collaboration-cost)) (list (D22 - construction-cost) (D22 - construction-cost)))
      
      let eq generic-mixed-strategy-nash m1 m2
      let p1 first eq let p2 last eq
      
      verbose (word "probas : p1 = " p1 " ; p2 = " p2)
      
      let r1 random-float 1 let r2 random-float 1
      if r1 < p1 and r2 < p2 [verbose (word "Game : C - C") report (list first best12)]
      if r1 < p1 and r2 > p2 [verbose (word "Game : C - NC") report (list first best1 first best2)]
      if r1 > p1 and r2 < p2 [verbose (word "Game : NC - C") report (list first best1 first best2)]
      if r1 > p1 and r2 > p2 [verbose (word "Game : NC - NC") report (list first best1 first best2)]
      report (list first best12)
   ]  
  
   ; report empty if conditions were not met
   report [[]]
   
end



;;
; Report probabilities for a 2 choice generic game
;  
;  @param mi [[Ui(C,C) Ui(A,C)][Ui(C,A) Ui(A,A)]]
;  @returns [p1 = |P(C1 = C) ; p2 = |P(C2 = C)]
;
to-report generic-mixed-strategy-nash [m1 m2]
  let p1 (last last m1 - first last m1) / (first first m1 + last last m1 - first last m1 - last first m1)
  let p2 (last last m2 - last first m2) / (first first m2 + last last m2 - first last m2 - last first m2)
  report (list p1 p2)
end



;;
; Construct the given infrastructures (list of infras)
;
; Update matrices distances etc here !
to construct-infrastructure [infras old-config]
  
  recall-nw-config old-config
  
  foreach infras [
    
    let infra ?
    
    if infra != [] [
      
      verbose (word "constructing : " infra)
      
    let new-link new-infra infra
    
    ; update matrices
    update-network new-link
    update-effective-matrices
    
    ; then correct the network by planarization if intersecting links.
    ; Beware, has to be done AFTER updating matrices, as nw updating needs footprint of the link (fastest way to get patches newly connected to the network
    ;  but planarizing before would kill the entire links, cutting it into smaller
    planarize-network transportation-nodes transportation-links
    ]
  ]
  
end


;; report the link corresponding to coordinates
to-report new-infra [coords]
  let e1 nobody let new-link nobody
  create-transportation-nodes 1 [new-transportation-node setxy first first coords last first coords set e1 self]
  create-transportation-nodes 1 [
    new-transportation-node setxy first last coords last last coords
    create-transportation-link-with e1 [new-transportation-link set new-link self]
  ]
  report new-link
end




to-report random-infra [patchset infra-length]
  let p1 one-of patchset
  ;let p2 nobody
  ;ask p1 [set p2 one-of other patches in-radius infra-length]
  
  ; fixed infra length
  let p2 nobody if p1 != nobody [ask p1 [set p2 one-of patchset with [abs(distance myself - infra-length) < 1.5]]]
  if p2 = nobody [ if p1 != nobody [ask p1 [set p2 one-of patchset with [distance myself < infra-length]]]]
  ifelse p2 = nobody or p1 = nobody [report (list (list random-xcor random-ycor) (list random-xcor random-ycor))][
  report (list (list [pxcor] of p1 [pycor] of p1) (list [pxcor] of p2 [pycor] of p2))  
  ]
end








