
;;;;;;;;;;;;;
;; transportation
;;;;;;;;;;;;;



;;
;  Transportation module of the luti model
;
;  Uses cached shortest paths to compute congestion.
to transportation
  
  output-print "transportation"
  
  ; compute patch to patch flows through furness algorithm
  compute-flows
  
  ; use effective paths matrix to compute wardrop ?
  transportation-affectation
  
  ; update congestion given the affectation
  update-congestion
  
end


;;
; Furness algo
to compute-flows
  
  ;let n count patches
  
  ; initial weights
  let p rep (1 / #-patches) #-patches let q rep (1 / #-patches) #-patches
  ; reinitialize matrix
  set flow-matrix matrix:make-constant #-patches #-patches 0
  
  ; compute (equilibrium ?) weights
  ; how many iterations needed ?
  let n-iter-furness 10
  repeat n-iter-furness [    
    let ptemp p let qtemp q
    set p map [1 / ?] first matrix:to-column-list (matrix:times effective-distance-matrix (matrix:from-column-list (list list-times-element-wise qtemp patches-employments)))
    set q map [1 / ?] first matrix:to-column-list (matrix:times effective-distance-matrix (matrix:from-column-list (list list-times-element-wise ptemp patches-actives)))
  ]
  
  ; then set flows as \phi_ij = p_i*q_j*A_i*E_j*effective_distance(i,j)
  ;   -> Q : here effective dist takes into account network
  
  set flow-matrix matrix:times-element-wise (matrix:times-element-wise (matrix:from-column-list (rep (list-times-element-wise p patches-actives) #-patches)) (matrix:from-row-list (rep (list-times-element-wise q patches-employments) #-patches))) effective-distance-matrix
  
  
end


;;
; compute the affectation of user trajectories though iterated wardrop eq determination (?)
;
; Initial flow matrix as argument ? not needed as global var.
to transportation-affectation
  
  ; reinitialize
  set patches-congestion rep 1 (count patches)
  
  ; repeat on all couples of patches, now that flows are known
  let p1 0 let p2 0
  repeat #-patches [
    set p2 0
    repeat #-patches [
       let a1 table:get nw-access-table p1 let a2 table:get nw-access-table p2
       ; check if nw is taken or direct
       ;
       ; Q : congestion in euclidian space needed ?
       ;
       if ((matrix:get euclidian-distance-matrix p1 p2) * euclidian-min-pace) > (((matrix:get euclidian-distance-matrix p1 a1) + (matrix:get euclidian-distance-matrix p2 a2)) * euclidian-min-pace + (matrix:get network-distance-matrix a1 a2))[
         let path table:get network-shortest-paths (list (one-of map [first ?] table:get closest-nw-inters a1) (one-of map [first ?] table:get closest-nw-inters a2))
         foreach path [set patches-congestion replace-item ? patches-congestion (item ? patches-congestion + matrix:get flow-matrix p1 p2)]
       ]
       set p2 p2 + 2
    ]
    set p1 p1 + 1
  ]
  
end



;;
; update congestion
to update-congestion
  
  ; depends on affectation
  ; update the matrices
  
  update-network-distance-matrix
  update-effective-matrices
  
  
end