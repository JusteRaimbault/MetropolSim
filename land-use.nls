
;;;;;;;;;;;;;;;;;
;; land-use
;;;;;;;;;;;;;;;;;


;; land-use evolution
to land-use
  
  repeat 10 [
    repeat 10 [
      updateUtilites
      mouvementsActifs
      displayActifs
    ]
  
    repeat 10 [
      updateUtilites
      mouvementsEmplois
      displayEmplois
    ]
  ]


end




to updateUtilites
  updateDensityActifs
  updateDensityEmplois
  updateutiliteActifs
  updateutiliteEmplois
end






to mouvementsActifs
; si il y a des logements sociaux, c'est l� qu'il faut l'�voquer, avec les listAnbrM; pour l'instant, rien de tout �a...

let c 0
let temp 0
while [c < Ncsp] [
  set temp 0
  ask patches [
    set temp temp + exp (item c listcoeffUtilitesActifs * item c listAUtiliteR)
  ]
  ;;;;show temp
  ask patches [
    ;set plabel int ( 100 * exp (item c listcoeffUtilitesActifs * item c listAUtiliteR) / temp )  / 100
    set listAnbrR replace-item c listAnbrR (item c listNactifs * exp (item c listcoeffUtilitesActifs * item c listAUtiliteR) / temp)
    ;;;;show listAnbrR
  ]
  set c c + 1
]

end

to mouvementsEmplois

let c 0
let temp 0
while [c < Ncsp] [
set temp 0
  ask patches [
    set temp temp + exp (item c listcoeffUtilitesEmplois * item c listEUtiliteR)
  ]
  ;;;show temp
  ask patches [
    set listEnbr replace-item c listEnbr (item c listNactifs * exp (item c listcoeffUtilitesEmplois * item c listEUtiliteR) / temp)
  ]
  set c c + 1
]
end





to updateDensityActifs
let tempActifs 0
ask patches [
let c 0
set listDensiteActifs []
while [c < Ncsp] [
  let j 0
  set tempActifs 0
   while [j < length listPatchesRegion] [
    let m 0
    while [m < nModes] [
      let tempShare item j item c item m listModesShare
      let tempCout coutDistance (item j item c item m listCoutTransport)
      ;set tempActifs tempActifs + tempShare * (item c [listAnbrR] of item j listPatchesRegion + item c [listAnbrM] of item j listPatchesRegion) * tempCout
       ifelse item j listPatchesRegion = self
       [
        set tempActifs tempActifs +  (item c listAnbrR + item c listAnbrM)
       ]
       [
       set tempActifs tempActifs + (item c [listAnbrR] of item j listPatchesRegion + item c [listAnbrM] of item j listPatchesRegion) / distance item j listPatchesRegion 
       ]
       set m m + 1
    ]
    set j j + 1
  ]
  set listDensiteActifs lput tempActifs listDensiteActifs
  set c c + 1
]

]

end





to updateDensityEmplois

let tempEmplois 0
ask patches [
let c 0
set listDensiteEmplois []

while [c < Ncsp] [
  let j 0
   set tempEmplois 0
  while [j < length listPatchesRegion] [
    let m 0
    while [m < nModes] [
      let tempShare item j item c item m listModesShare
      let tempCout coutDistance(item j item c item m listCoutTransport)
      ;set tempEmplois tempEmplois + tempShare * (item c [listEnbr] of item j listPatchesRegion) * tempCout
             ifelse item j listPatchesRegion = self
       [
        set tempEmplois tempEmplois +  (item c listEnbr)
       ]
       [
       set tempEmplois tempEmplois + (item c [listEnbr] of item j listPatchesRegion) / distance item j listPatchesRegion 
       ]
      
      
      set m m + 1
    ]
    set j j + 1
  ]
  set listDensiteEmplois lput tempEmplois listDensiteEmplois
  set c c + 1
]

]

end







to updateUtiliteActifs
let tempL []
let c 0
while  [c < Ncsp] [
  set tempL lput 0 tempL
  set c c + 1
]


ask patches [
set c 0
while [c < Ncsp] [
  set listAutiliteM replace-item c listAutiliteM item c listAutiliteM
  set listAutiliteR replace-item c listAutiliteR calculerutiliteActifs c
  set tempL replace-item c tempL (item c tempL + item c listAutiliteR)
  set c c + 1
]
]

ask patches [
set c 0
while [c < Ncsp] [
  ;set listAutiliteM replace-item c listAutiliteM item c listAutiliteM
  set listAutiliteR replace-item c listAutiliteR (item c listAutiliteR / item c tempL )
  set c c + 1
]
]

end





to updateUtiliteEmplois
let tempL []
let c 0
while  [c < Ncsp] [
  set tempL lput 0 tempL
  set c c + 1
]
ask patches [
set c 0
while [c < Ncsp] [
  set listEutiliteM replace-item c listEutiliteM item c listEutiliteM
  set listEutiliteR replace-item c listEutiliteR calculerUtiliteEmplois c
  set tempL replace-item c tempL (item c tempL + item c listEutiliteR)
  set c c + 1
]
]

ask patches [
set c 0
while [c < Ncsp] [
  ;set listEutiliteM replace-item c listEutiliteM item c listEutiliteM
  set listEutiliteR replace-item c listEutiliteR (item c listEutiliteR / item c tempL )
  set c c + 1
]
]

end





to chercheEmploi [temp-actif]
; il s'agit pour l'actif consid�r� de trouver un emploi. pour l'instant, on fait
; cela n'importe au hasard, sans consid�ration de distance
ask temp-actif [
  set emploiActif one-of emplois with [actifEmploi = 0]
  
  ask emploiActif [set actifEmploi myself]
  ;set [actifEmploi] of emploiActif self
]


end

to chercheActif [temp-emploi]


end







to-report calculerutiliteActifs [csp]
let acces item csp AccessibilitePatches
let forme 1

let c 0
while [c < nCSP] [

    if item c listDensiteActifs > 0 [
    set forme forme * exp(item c item csp matActifsActifs * ln(item c listDensiteActifs))
    ]
    if item c listDensiteEmplois > 0 [
    set forme forme * exp(item c item csp matActifsEmplois * ln(item c listDensiteEmplois))
    ] 
  set c c + 1
]
;coeffAccessibiliteFormeUrbaine
report exp(item csp listcoeffAccessibiliteFormeUrbaineActifs * ln(acces)) * exp((1 - item csp listcoeffAccessibiliteFormeUrbaineActifs) * ln(forme))
end


to-report calculerutiliteEmplois [csp]
let acces item csp AccessibilitePatches
let forme 1

let c 0
while [c < nCSP] [

    if item c listDensiteActifs > 0 [
    set forme forme * exp(item c item csp matEmploisActifs * ln(item c listDensiteActifs))
    ]
    if item c listDensiteEmplois > 0 [
    set forme forme * exp(item c item csp matEmploisEmplois * ln(item c listDensiteEmplois))
    ] 
    ;;;;show forme
  set c c + 1
]
;;show forme
;coeffAccessibiliteFormeUrbaine
report exp(item csp listcoeffAccessibiliteFormeUrbaineEmplois * ln(acces)) * exp((1 - item csp listcoeffAccessibiliteFormeUrbaineEmplois) * ln(forme))
end






