
;;;;;;;;;;;;;;;;;;;;;;
;; Generic NW functions
;;;;;;;;;;;;;;;;;;;;;;




;;
; Planarize a network, by simply "flattening the bridges"
;
;  Necessarily in O(#(edges-agentset)^2) as have to checkall intersections between links.
to planarize-network [vertices-agentset edges-agentset]
  
  let remaining-edges to-list edges-agentset
  
  ; get breeds
  let vertices-breed agentset-uniform-breed vertices-agentset
  ; rq : with hatch the vertices-breed should not be needed ?
  let links-breed agentset-uniform-singular-breed edges-agentset
  
  while [length remaining-edges > 0][
    let current-edge first remaining-edges set remaining-edges remove-item 0 remaining-edges
    foreach remaining-edges [
       let inter intersection-with-link ? current-edge
       if length inter > 0 [
          let t11 [end1] of ? let t12 [end2] of ? let t21 [end1] of current-edge let t22 [end2] of current-edge
          ; create the new intersection and connects it
          let new-int nobody
          run (word "create-" vertices-breed " 1 [set new-int self]")
          
          ; TODO
          
       ]
    ]
  ]
  
end


;;;;;;;;;;;;;
;; Connexify nw following std algo 
;;
;; Uses provided turtles and links agentsets.
;
;  Note : resulting nw is not necessary planar ! -> planification primitive, better be separated for more flexibility<
;;;;;;;;;;;;
to connexify-network [vertices-agentset edges-agentset]
  nw:set-context vertices-agentset edges-agentset
  let clusters nw:weak-component-clusters
  
  let links-breed agentset-uniform-singular-breed edges-agentset
  
  while [length clusters > 1] [
    let c1 first clusters
    let mi sqrt (world-width ^ 2 + world-height ^ 2) ;biggest possible distance
    ; rq : obliged to go through all pairs in nw. the same as merging clusters and taking closest point
    ; second alternative is less dirty in writing but as merging is O(n^2), should be longer.
    let mc1 nobody let mc2 nobody
    foreach but-first clusters [
       let c2 ?
       ask c1 [ask c2 [let d distance myself if d < mi [set mi d set mc1 myself set mc2 self]]]
    ]
    ask mc1 [
      ; create link : need to find the breed of used links
      run (word "create-" links-breed "-with mc2")
    ]
    set clusters nw:weak-component-clusters
  ]
  
end