
;;;;;;;;;;
;;
;; Governement
;;
;;   -> Evolution of transportation network
;;
;;  TODO : factorize network prospective ? around ~ 1000 lines in raw governement file, would be good to factorize !
;;;;;;;;;;



;;
; Network evolution stage of an iteration
;
;;
to gouvernement
  
  updateMaires
  
  updatePlots

  ; find mayor building infrastructure and creates it
  creerInfrastructureR chooseMaire

  ; Q : is it good to tick inside ?
  tick
  
  ;;;;;
  ; plus tard, � tick correspondra une hausse progressive du car ownership, avec pour effet de rendre rentables les projets routiers, donc il se font, donc ca transforme la m�tropole...
  ;;;;;
  
end



to updateMaires
  ask maires [
    ; visualization
    set size sqrt ( sum [sum listEnbr] of patches with [mairePatch = myself]) / 500
    
    ; budget = number of employments
    set budget ( sum [sum listEnbr] of patches with [mairePatch = myself]) ; a affiner une fois que la ville, y'a des gens dedans!
  ]
end









to updateListCoutTransportsPatches [tempmaire temp?]
;;;;;;;;;;;show "d�but"
let listP []
;ifelse is-maire? tempmaire [
;  set listP [listPatchesMaire] of tempmaire
;][
  set listP listPatchesRegion
;]

let i 0
let m 0
while [i < length listP] [
  updateListConnecteursPatches item i listP
  ;;;;;;;;;;;;;show "update Connecteurs OK"
 
 ask item i listP [
  ;;;;;;;;;;;show 1


;  set listChemins [[]] 
;  set listCoutTransport [[]]
;  set listCoutTransportEffectif [[[]]]
 
   set listChemins [] 
  set listCoutTransport []
  set listDistTransportEffectif []
  set listCoutTransportEffectif []
  set listDistOiseauTransportEffectif []
  set listCoutOiseauTransportEffectif [] 
   set listDistReseauTransportEffectif []
  set listCoutReseauTransportEffectif [] 
  
set m 0

  while [m < nModes] [

    ;;;;;;;;;;;show m * 10
    ;set listCoutTransportTemp lput [] listCoutTransportTemp 
    ;set listCoutTransportEffectifTemp lput []  listCoutTransportEffectifTemp
    ;set listCheminsTemp lput [] listCheminsTemp
    set listChemins lput [] listChemins
    set listCoutTransport lput [] listCoutTransport
    ;set listCoutTransportEffectif lput [[]] listCoutTransportEffectif
set listDistTransportEffectif lput [] listDistTransportEffectif    
set listCoutTransportEffectif lput [] listCoutTransportEffectif
set listDistOiseauTransportEffectif lput [] listDistOiseauTransportEffectif    
set listCoutOiseauTransportEffectif lput [] listCoutOiseauTransportEffectif    
set listDistReseauTransportEffectif lput [] listDistReseauTransportEffectif    
set listCoutReseauTransportEffectif lput [] listCoutReseauTransportEffectif    
  
;    while [m < Nmodes] [
;      set listNavettesModes lput [[]] listNavettesModes
;      set listModesShare lput [[]] listModesShare
;      let c 0
;      while [c < Ncsp] [
;         set listNavettesModes replace-item m listNavettesModes lput [] item m listNavettesModes
;        set listModesShare replace-item m listModesShare lput [] item m listModesShare
;        
;        set c c + 1
;      ]
;      set m m + 1
;    ]    
;    
    
    
        let c 0
    
    while [c < Ncsp] [
    set listDistTransportEffectif replace-item m listDistTransportEffectif lput [] item m listDistTransportEffectif
    set listCoutTransportEffectif replace-item m listCoutTransportEffectif lput [] item m listCoutTransportEffectif
        set listDistOiseauTransportEffectif replace-item m listDistOiseauTransportEffectif lput [] item m listDistOiseauTransportEffectif
    set listCoutOiseauTransportEffectif replace-item m listCoutOiseauTransportEffectif lput [] item m listCoutOiseauTransportEffectif
        set listDistReseauTransportEffectif replace-item m listDistReseauTransportEffectif lput [] item m listDistReseauTransportEffectif
    set listCoutReseauTransportEffectif replace-item m listCoutReseauTransportEffectif lput [] item m listCoutReseauTransportEffectif
    
     set listCoutTransport replace-item m listCoutTransport lput [] item m listCoutTransport;MODIFENCOURS
     ; ;;;;show listCoutTransportEffectif
      set c c + 1
    ]
    set m m + 1
    ;;;;;;;;;;show "on calcule initialise les temps entre patches pour le mode"
    ;;;;;;;;;;show m
    ;;;;;;;;;;show "listCoutTransport"
    ;;;;;;;;;;show listCoutTransport
  
  ]  
]
 set i i + 1
]
;MODIFENCOURS
;set m 0
;while [m < nModes] [
;  ;;;;;;;;;;;show "je m'apprete a updater les couts, pour le mode / 10"
;  ;;;;;;;;;;;show m * 10
;  updateListCoutTransportsPatchesMode tempmaire temp? listP m
;  set m m + 1
;]

set m 0
while [m < nModes] [
    let c 0
    while [c < Ncsp] [
    ;;;;;;;;;;;show "je m'apprete a updater les couts, pour le mode / 10"
    ;;;;;;;;;;;show m * 10
    updateListCoutTransportsPatchesMode tempmaire temp? listP m c
    set c c + 1
  ]
  set m m + 1 
]





end

to updateListCoutTransportsPatchesMode [tempmaire temp? listP mode csp]

;;;;;;;;;;show "on calcule les temps entre patches pour le mode"
;;;;;;;;;;show mode

let i 0
let temp 0
let tempD 0
let tempDOiseau 0
let tempDReseau 0
let tempCOiseau 0
let tempCReseau 0

let tempL []
while [i < length listP] [
  let j 0
;  ask item i listP [
;  ifelse is-maire? tempmaire [
;  
;  set listCoutTransportTemp []  
;  set listCoutTransportEffectifTemp []
;  if not temp? [  set listCheminsTemp [] ]
;  ][
;  set listCoutTransport []
;  set listCoutTransportEffectif []
;  if not temp? [  set listChemins [] ]
;  ]
;  ]
;  
;    
  ;;;;;;;;;;;;;show "liste couts initialis�e"
  while [j < length listP] [
    ;;;;;;;;;;;show item i listP
    ;;;;;;;;;;;show item j listP
    ask item i listP [
    set tempD (item 4 coutTransportPatches item i listP item j listP mode csp)
    set tempDOiseau (item 0 coutTransportPatches item i listP item j listP mode csp)
    set tempDReseau (item 1 coutTransportPatches item i listP item j listP mode csp)
    set tempCOiseau (item 2 coutTransportPatches item i listP item j listP mode csp)
    set tempCReseau (item 3 coutTransportPatches item i listP item j listP mode csp)    
    set temp (item 5 coutTransportPatches item i listP item j listP mode csp)
    if not temp? [set tempL but-first but-first but-first but-first but-first but-first coutTransportPatches item i listP item j listP mode csp]
;    ifelse is-maire? tempmaire [
;    ;set listCoutTransportTemp lput temp listCoutTransportTemp
;    set listCoutTransportTemp replace-item mode listCoutTransportTemp lput temp item mode listCoutTransportTemp
;    
;    
;    if listNavettesPatches != 0 [
;    
;    ;set listCoutTransportEffectifTemp lput (temp * item j listNavettesPatches) listCoutTransportEffectifTemp
;    set listCoutTransportEffectifTemp replace-item mode listCoutTransportEffectifTemp lput (temp * item j listNavettesPatches) item mode listCoutTransportEffectifTemp
;    
;    ]
;    if not temp? [
;    ;set listCheminsTemp lput tempL listCheminsTemp
;    set listCheminsTemp replace-item mode listCheminsTemp lput tempL item mode listCheminsTemp
;    ]
;    ]
;    [
    ;MODIFENCOURSset listCoutTransport replace-item mode listCoutTransport lput temp item mode listCoutTransport
    let trefle item mode listCoutTransport
      set trefle replace-item csp trefle lput (temp) item csp trefle
       set listCoutTransport replace-item mode listCoutTransport trefle
    
    if listNavettesPatches != 0 [ 
    ;MODIFENCOURSset c 0
    ;MODIFENCOURSwhile [c < nCsp] [
    let treff item mode listCoutTransportEffectif
      set treff replace-item csp treff lput (temp * item j item csp listNavettesPatches) item csp treff
       set listCoutTransportEffectif replace-item mode listCoutTransportEffectif treff
      ;MODIFENCOURSset c c + 1
    ;]
    
    ;set listCoutTransportEffectif replace-item mode listCoutTransportEffectif lput (temp * item j listNavettesPatches) item mode listCoutTransportEffectif
    
    ;]
   
       let dreif item mode listDistTransportEffectif
      set dreif replace-item csp dreif lput (tempD * item j item csp listNavettesPatches) item csp dreif
       set listDistTransportEffectif replace-item mode listDistTransportEffectif dreif
   
       let dreifDistOiseau item mode listDistOiseauTransportEffectif
      set dreifDistOiseau replace-item csp dreifDistOiseau lput (tempDOiseau * item j item csp listNavettesPatches) item csp dreifDistOiseau
       set listDistOiseauTransportEffectif replace-item mode listDistOiseauTransportEffectif dreifDistOiseau
       
              let dreifDistReseau item mode listDistReseauTransportEffectif
      set dreifDistReseau replace-item csp dreifDistReseau lput (tempDReseau * item j item csp listNavettesPatches) item csp dreifDistReseau
       set listDistReseauTransportEffectif replace-item mode listDistReseauTransportEffectif dreifDistReseau
       
         let dreifCoutOiseau item mode listCoutOiseauTransportEffectif
      set dreifCoutOiseau replace-item csp dreifCoutOiseau lput (tempCOiseau * item j item csp listNavettesPatches) item csp dreifCoutOiseau
       set listCoutOiseauTransportEffectif replace-item mode listCoutOiseauTransportEffectif dreifCoutOiseau
       
              let dreifCoutReseau item mode listCoutReseauTransportEffectif
      set dreifCoutReseau replace-item csp dreifCoutReseau lput (tempCReseau * item j item csp listNavettesPatches) item csp dreifCoutReseau
       set listCoutReseauTransportEffectif replace-item mode listCoutReseauTransportEffectif dreifCoutReseau
       
  
   
   
   
   
     if not temp? [ 
      ;set listChemins lput tempL listChemins
      set listChemins replace-item mode listChemins lput tempL item mode listChemins
      ;;;;;;;;show listChemins
      ]
    ]
    
    
    
    ;;;;;;;;;;;;;show "cout tranport i -> j calcul�"
    ]
    set j j + 1
  ]
  set i i + 1
]


end





to creerInfrastructureR [temp-maire]
let bestPaire1 0
let bestPaire2 0
let bestBCR -1000
let tempC 0
let tempB 0
updateListCoutTransportsPatches temp-maire false
updateAccessibilitePatches temp-maire
;let accesOld calculerAccessibilite "region" 1
;let accesOld sum [(sum listAnbrM + sum listAnbrR) * accessibilitePatches] of patches
;;;;;;;;;;;;show accesOld
;let accesOld 0

let accesOld reportAccessibilite temp-maire

;ifelse is-maire? temp-maire [
;set accesOld sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches with [mairePatch = temp-maire]
;;set accesOld sum [sum listCoutTransportEffectifTemp] of patches with [mairePatch = temp-maire]
;][
;set accesOld sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches
;;set accesOld sum [sum listCoutTransportEffectif] of patches
;]
;;;;;;;;;;;;show "temps total de transport des administr�s"
;;;;;;;show "accessibilite"
;;;;;;;show accesOld
;
; and (mairePatch = temp-maire)
;
;ask patches with [mairePatch = ] [
ask patches with [has-node? = 1 or has-maire? = 1] [
if not is-maire? temp-maire or mairePatch = temp-maire [
let patchA self
  ask neighbors [
    if not is-maire? temp-maire or mairePatch = temp-maire [
    let patchB self
         let attributs (list 0 3 100 0)
         ifelse is-maire? temp-maire [set attributs lput 115 attributs]
         [set attributs lput 15 attributs]
;      ;;;;;;;;;;;;;;show patch x1 y1
;      ;;;;;;;;;;;;;;show patch x2 y2
      ;;;;;;;show "maintenant je vais entrer dans EVALUERBENEFICE"
    set tempB ((evaluerBeneficeInfrastructure patchA patchB attributs temp-maire 0) - accesOld)
    ; signe - pour les temps de transport: on cherche soit � maximiser l'accessibilit� totale, soit � minimiser le temps de transport total...
;      ;;;;;;;;;;;;;;;show tempB
      set tempC evaluerCoutInfrastructure patchA patchB 0
      ;show "gain accessibilit� possible"
      ;show tempB
      if (tempB / tempC) > bestBCR [    
          set bestBCR (tempB / tempC)
          set bestPaire1 patchA
          set bestPaire2 patchB
       ]
  ]
  ]
]
]
ask nodes with [tempNode? = 1] [die]
if true [;bestBCR > 1 [
let attributs (list 0 3 100 0)
ifelse is-maire? temp-maire [set attributs lput 115 attributs][set attributs lput 15 attributs]
  creerInfrastructure bestPaire1 bestPaire2 attributs 0
  creerInfrastructure bestPaire2 bestPaire1 attributs 0
]


ask nodes with [tempNode? = 1] [die]
if true [;bestBCR > 1 [
let attributs (list 0 3 100 0)

creerInfrastructure bestPaire1 bestPaire2 attributs 0
creerInfrastructure bestPaire2 bestPaire1 attributs 0
]
end


to creerImmobilierM [temp-maire]

end

to creerImmobilierR


end




to creerInfrastructure [bestPaire1 bestPaire2 attributsLinks tempLink]

;attributsLinks liste consitu�e de
; typeNode
; speed_l
; capacity
; waitTime


if (not any? nodes with [patchNode = bestPaire1 and typeNode >= 0]) and is-patch? bestPaire1 [
ask bestPaire1 [
  sprout-nodes 1 [
    set typeNode item 0 attributsLinks
    set patchNode myself
    set hidden? true
    set shape "circle"
    set color red
    set size 0.1
    set tempNode? tempLink
  ]
  if tempLink != 1 [set has-node? 1]
]
]
if (not any? nodes with [patchNode = bestPaire2 and typeNode >= 0]) and is-patch? bestPaire1  [
ask bestPaire2 [
  sprout-nodes 1 [
    set typeNode item 0 attributsLinks
    set patchNode myself
    set hidden? true
    set shape "circle"
    set color red
    set size 0.1
    set tempNode? tempLink
  ]
  if tempLink != 1 [set has-node? 1]
]
]
if any? nodes with [patchNode = bestPaire1  and typeNode >= 0] and any? nodes with [patchNode = bestPaire2 and typeNode >= 0] [
ask one-of nodes with [patchNode = bestPaire1  and typeNode >= 0] [

;create-link-from one-of nodes with [patchNode = bestPaire2] [
;  set color black
;  set maxSpeed 100
;  set capacity 10000
;  set waitTime 0
;  set BCRinit bestBCR
;]

create-link-to one-of nodes with [patchNode = bestPaire2 and typeNode >= 0] [
  ifelse tempLink = 1 [
  set color item 4 attributsLinks + 3
  ][set color item 4 attributsLinks
  ]
  ;set shape "ligne"
  
  set typeLink item 0 attributsLinks
  ifelse typeLink = 0 [
    set shape "rail"
  ][
    set shape "route"
  ]
  
  set speed_empty_l item 1 attributsLinks
  set speed_l speed_empty_l
  set capacity_l item 2 attributsLinks
  set waitTime item 3 attributsLinks
  set tempLink? tempLink
  ]
]
]
end

to updateAccessibilitePatches [tempmaire]
let i 0
let m 0
let temp 0
let listP []
;ifelse is-maire? tempmaire [
;  set listP [listPatchesMaire] of tempmaire
;][
  set listP listPatchesRegion
;]
while [i < length listP] [
ask item i listP [
;ifelse is-maire? tempmaire [
;set listAccessibilitesPatchesTemp []
;][
set  listAccessibilitesPatches []
set m 0
while [m < nModes] [
  set listAccessibilitesPatches lput [] listAccessibilitesPatches
  let c 0
  while [c < Ncsp] [
    set listAccessibilitesPatches replace-item m listAccessibilitesPatches lput [] item m listAccessibilitesPatches
    set c c + 1
  ]
  set m m + 1
]

set m 0
while [m < nModes] [
;  set temp calculAccessibilite item i listP listP m
;  set listAccessibilitesPatches replace-item m listAccessibilitesPatches lput temp listAccessibilitesPatches
;  
  let c 0
  while [c < nCsp] [
    calculAccessibilite (item i listP) listP m c
    set c c + 1
  ]
  set m m + 1
]
;]
;ask patches [

;ifelse is-maire? tempmaire [
;set accessibilitePatchesTemp temp
;][
set accessibilitePatches accessibilitePonderee self
;]
]
set i i + 1
]
end



;;
; Cost of a new infrastructure
;
;  for now : proportional to length of road
;
;  @param patchA
;  @param patchB
;  @param typeTransport
;  @return cost
;;
to-report evaluerCoutInfrastructure [patchA patchB typeTransport]
  let d 0 ask patchA [set d distance patchB] report d
  
;  ;;;;;;;;;;;;;;;;show "j'�value le cout de l'infrastructure"
;  let tempCout 0
;  let patchCourant patchA
;  let dist1 0
;  let head 0
;  ask patchA [
;    set dist1 distance patchB
;    set head towards patchB
;  ]
;  ;let i 0
;  ;
;  ;while [i < dist1 + 1] [; and patchCourant != patchB] [
;  ;  if patch-at-heading-and-distance head i != patchCourant [
;  ;    set patchCourant patch-at-heading-and-distance head i
;  ;    set tempCout sum [listAnbrM * listAutiliteR] of patchCourant + sum [listEnbr * listEutiliteM] of patchCourant
;  ;  ]
;  ;  set i i + 1
;  ;]
;  ;report tempCout
;  
;  report dist1
;  ;report 1
end



;;
; Evaluate benefits of a new transportation infrastructure
;
;   @param patchA
;   @param patchB
;   @param attributsLinks
;   @param tempmaire
;   @param typeTransport
;   @report new accessibility of the area for this mayor
;;
to-report evaluerBeneficeInfrastructure [patchA patchB attributsLinks tempmaire typeTransport]
  ; a terme impl�menter hausse accessibilit� et plus tard, impacts environnementaux de TC (dans les couts pour VP?)
  log-debug word "Evaluating infrastructure from " patchA " to " patchB

  ;; @TODO : why create infra in both senses (isnt the network undirected ?)
  creerInfrastructure patchA patchB attributsLinks 1
  creerInfrastructure patchB patchA attributsLinks 1

  ;updateListCoutTransportsPatches tempmaire true
  updateListCoutTransportsPatches "region" false
  updateAccessibilitePatches tempmaire
  updateDeplacementsDomicileTravail
  
  ;let accesNew 0
  let accesNew reportAccessibilite tempmaire
  
  ;ifelse is-maire? tempmaire [
  ;
  ;set accesNew sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches with [mairePatch = tempmaire]
  ;; a changer, bien entendu, pour tenir compte des CSP
  ;;set accesNew sum [sum listCoutTransportEffectifTemp] of patches with [mairePatch = tempmaire]
  ;][
  ;
  ;set accesNew sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches
  ;;set accesNew sum [sum listCoutTransportEffectif] of patches
  ;]
  
  
  ;;;;;;;;;;;;show "gain possible de transport des administr�s"
  ;;;;;;;;;;;;show (- (accesNew - accesOld))
  
  
  ;let accesNew calculerAccessibilite niveau typeTransport
  ;;;;;;;;;;;;;;show accesNew - accesOld
  ;;;;;;;;;;;;;;show "c'est le b�n�fice de la construction propos�e"

  ;; kill temporary links and nodes
  ask links with [tempLink? = 1] [die]
  ask nodes with [tempNode? = 1] [die]
  
  ;;;;;;;;;;;;show  accesNew - accesOld
  report (accesNew)

end



to-report coutTransportPatches [patch1 patch2 typeTransport csp]
;;dictionnaire des types de transport

; 1 = transports en commun
; 2 = voiture



let cheminTemp []


let coutMin 99999
let cout1 0
let dist1 0
let distOiseau 0
let distReseau 0
let coutOiseau 0
let coutReseau 0
ask patch1 [
set cout1 distance patch2 * item csp item typeTransport listCoutDistance +  (distance patch2 / item typeTransport listSpeed) * item csp listValeursTemps
set dist1 distance patch2
set distOiseau dist1
set coutOiseau cout1
]

let i 0

let distTempOiseau 0
let distTempReseau 0
let timeTempOiseau 0
let timeTempReseau 0
let coutTempOiseau 0
let coutTempReseau 0
let coutTemp 0
let temptemp 0
let distMin dist1
let distOiseauA 0
let distReseauA 0
let coutOiseauA 0
let coutReseauA 0
while [i < length [item typeTransport listNoeuds] of patch1] [
let j 0

  ;;;;;;;;;;;;show "je fais dijkstra � partir de"
  ;;;;;;;;;;;;show item i [listNoeuds] of patch1
  dijkstra item i [item typeTransport listNoeuds] of patch1 typeTransport
  
  while [j <  length [item typeTransport listNoeuds] of patch2] [ 
  set distTempOiseau 0
  set distTempReseau 0
  set timeTempOiseau 0
  set timeTempReseau 0  
  set coutTempOiseau 0
  set coutTempReseau 0
  set coutTemp 0
  ;;;;;;;;;;;;show "je trouve la distance suivante"
    ask patch1 [
      set temptemp (distance item i [item typeTransport listNoeuds] of patch1)
      set distTempOiseau distTempOiseau + temptemp
      set timeTempOiseau timeTempOiseau + temptemp / item typeTransport listSpeed
    ]
    ;ask patch1 [set distTemp distTemp + (distance item i [listNoeuds] of patch1)]
    ;;;;;;;;;;;;show distTemp
    ask patch2 [
      set temptemp (distance item j [item typeTransport listNoeuds] of patch2)
      set distTempOiseau distTempOiseau + temptemp
      set timeTempOiseau timeTempOiseau + temptemp / item typeTransport listSpeed      
      ]
    ;ask patch2 [set distTemp distTemp + (distance item j [listNoeuds] of patch2)]
    ;;;;;;;;;;;;show distTemp
   ;;;;;;;;;;;;;;;show distTemp
   ;;;;;;;;;;;;show item j [listNoeuds] of patch2
   ; � ce stade distTemp est la distance "vol d'oiseau": il faut stocker cela!!!
   set coutTempOiseau distTempOiseau * item csp item typeTransport listCoutDistance + timeTempOiseau * item csp listValeursTemps
   ;BALISE
   
    set timeTempReseau [time-to-root] of item j [item typeTransport listNoeuds] of patch2
    set distTempReseau [dist-to-root] of item j [item typeTransport listNoeuds] of patch2
    set coutTempReseau distTempReseau * item csp item typeTransport listCoutDistance + timeTempReseau * item csp listValeursTemps
    set coutTemp coutTempReseau + coutTempOiseau
  ;;;;;;;;;;;;show distTemp
    ;;;;;;;;;;;;show "� comparer avec la distance euclidienne"
    ;;;;;;;;;;;;show dist
    if coutTemp < coutMin [
    set coutMin coutTemp
    set distMin (distTempReseau + distTempOiseau)
    set distOiseauA distTempOiseau
    set distReseauA distTempReseau
    set coutOiseauA coutTempOiseau
    set coutReseauA coutTempReseau    
    
    
;    ;;;;;;;;;;;show "noeud entr�e"
;    ;;;;;;;;;;;show item i [listNoeuds] of patch1
;    ;;;;;;;;;;;show "noeud sortie"
;    ;;;;;;;;;;;show item j [listNoeuds] of patch2
;    
    set cheminTemp [path] of item j [item typeTransport listNoeuds] of patch2
 ;   ;;;;;;;;;;;show cheminTemp
    ]
    
  set j j + 1]
set i i + 1]



;;;;;;;;;;;;;;;;;show nodes1
;;;;;;;;;;;;;;;;;show nodes2
;]
;;;;;;;;;;;;;show dist
;;;;;;;;;;;;;show distanceMin
if coutMin < cout1 [
set cout1 coutMin
set dist1 distMin

set distOiseau distOiseauA
set distReseau distReseauA
set coutOiseau coutOiseauA
set coutReseau coutReseauA

]

set cheminTemp fput cout1 cheminTemp
set cheminTemp fput dist1 cheminTemp;AVERIFIER
set cheminTemp fput coutReseau cheminTemp
set cheminTemp fput coutOiseau cheminTemp
set cheminTemp fput distReseau cheminTemp
set cheminTemp fput distOiseau cheminTemp

report cheminTemp
end




;to-report calculAccessibilite [patchFrom listPatchs typeTransport]
to calculAccessibilite [patchFrom listPatchs typeTransport csp]
;;;;;;;;;;;;;;;;;show "je calcule l'accessibilite depuis un patch donn�"
let i 0
let toreport 0
let temp 0
while [i < length listPatchs] [
  
;  ifelse is-maire? tempmaire [
;  set temp [sum listEnbr] of item i listPatchs * coutDistance(item i [item typeTransport listCoutTransportTemp] of patchFrom)
;  set listAccessibilitesPatchesTemp lput temp listAccessibilitesPatchesTemp
;  set toreport toreport + temp
;  ][
  set temp [item csp listEnbr] of item i listPatchs * coutDistance(item i [item csp item typeTransport listCoutTransport] of patchFrom)
  
  let temp1 item typeTransport listAccessibilitesPatches
  ;;;;show temp1
  ;set temp1 lput temp temp1
  set temp1 replace-item csp  temp1  (lput temp item csp temp1)
  
  
  
  set listAccessibilitesPatches replace-item typeTransport listAccessibilitesPatches temp1 
  
  ;;;;show listAccessibilitesPatches
  
  ;set listAccessibilitesPatches replace-item typeTransport listAccessibilitesPatches lput temp (item typeTransport listAccessibilitesPatches)
  
  
  
  
  ;set toreport toreport + temp
;  ]
  set i i + 1
]
;let toreport 0
;ask patches [
;  ifelse temp? [
;  set toreport toreport + [sum listEnbr] of self * exp(- 1 * item i [listCoutTransportTemp] of patchFrom); a changer pour les accessibilit�s r�gionales
;  ][
;  set toreport toreport + [sum listEnbr] of self * exp(- 1 * item i [listCoutTransport] of patchFrom); a changer pour les accessibilit�s r�gionales
;  ]
;
;]

;report toreport
; accessibilite par type de transport????
end




to-report reportAccessibilite [temp-maire]

;set accesNew sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches with [mairePatch = tempmaire]
let listP []
ifelse is-maire? temp-maire [
  set listP [listPatchesMaire] of temp-maire
][
  set listP listPatchesRegion
]
let temp 0
let c 0
while [c < Ncsp] [

  let i 0
  while [i < length listP] [
  ask item i listP [set temp temp + (item c list-A-nbr-M + item c list-A-nbr-R) * item c accessibilitePatches]
    set i i + 1
  ]
  ;ask patches [set temp temp + (item c listAnbrM + item c listAnbrR) * item c accessibilitePatches]
  
 
  
  set c c + 1
]

report temp

end






to-report accessibilitePonderee [patch1]
  ;let temp 0
  let j 0
  let listTemp [] ; j'en suis l�
  let c 0
  while [c < nCSP] [
        set listTemp lput 0 listTemp
          set c c + 1
      ]
  ;;;;;show listModesShare
  while [j < length listPatchesRegion] [
    let m 0
    while [m < nModes] [
      set c 0
      while [c < nCSP] [
        ;;;;;show item j item m listAccessibilitesPatches
        ;;;;;show item j item m listModesShare
        ;set temp temp + item j item m listModesShare * item j item m listAccessibilitesPatches
        ;set temp temp + item c item m item j listModesShare * item c item m item j listAccessibilitesPatches
        ;set temp temp + item j item c item m listModesShare * item j item c item m listAccessibilitesPatches
        set listTemp replace-item c listTemp (item c listTemp + item j item c item m listModesShare * item j item c item m listAccessibilitesPatches)
        set c c + 1
      ]
      
      
      set m m + 1
    ]
    
    
    set j j + 1
  ]

report listTemp
end





to updateListConnecteursPatches [patch1]

let m 0

  ;; log-debug "je commence mes connecteurs" log-debug word "nombre de modes" nModes ;; DEBUG
  
  ask patch1 [
    set listNoeuds [[]]
  ]

while [m < nModes][
ask patch1 [
  set listNoeuds lput [] listNoeuds
  ;;;;;;;;;;show m
  ;;;;;;;;;;show listNoeuds
]
  set m m + 1
]



set m 0
while [m < nModes][

let nbrC item m listNbrConnecteurs

if any? nodes with [typeNode = m] [
if count nodes with [typeNode = m] < nbrC [
  set nbrC count nodes with [typeNode = m]
]
let nodes1 min-n-of nbrC nodes with [typeNode = m] [distance patch1] 

let listTemp []
ask nodes1 [
  set listTemp lput self listTemp
]

ask patch1 [set listNoeuds replace-item m listNoeuds listTemp]
;NL4 - set [listNoeuds] of patch1 replace-item m [listNoeuds] of patch1 listTemp

]


   set m m + 1
]

;ask patch1 [
;;;;;;;;;;;show "mes connecteurs sont"
;;;;;;;;;;;show listNoeuds
;]

end




;;
;  Chooses the mayor that will take a decision this step
;
;  @report "region" if decision is global (drawn by probaLocal)
;;
to-report chooseMaire
let tempM "region"

let tempR random 100
if tempR < probaLocal [
  ;; total wealth
  let argent sum [budget] of maires
  
  let temp 0
  ; init random drawing vars money- and money+
  ask maires [
    set money- temp
    set temp temp + budget
    set money+ temp
  ]
  
  let tempR2 random-float argent
  ;let tempM one-of maires


  ask one-of maires with [money- <= tempR2 and money+ > tempR2] [
      set tempM self
      ;updateListCoutTransportsPatches tempM
      ;updateAccessibilitePatches tempM
    ]

  ]

  log-debug (word "Decision by " tempM)
  report tempM
  
end




to emptyActifs
ask patches [
  let c 0
  while [c < ncsp] [
    set list-A-nbr-M replace-item c list-A-nbr-M 0
    set list-A-nbr-R replace-item c list-A-nbr-R 0
    set c c + 1
  ]
]

end



















